import React, { useEffect, useState } from 'react';
import { deleteDoc, getDocs, collection, doc, setDoc } from 'firebase/firestore';
import type { NextPage } from 'next';
import Head from 'next/head';
import { PerformanceBarChart, StocksOverview } from '../components';
import { database } from '../config/firebase';
import { useAuth } from '../hooks';
import { Stock, StoredStock } from '../types';

const getStocksFromFirestore = async (userId: string): Promise<StoredStock[]> => {
  const querySnapshot = await getDocs(collection(database, `users/${userId}/stocks`));

  return querySnapshot.docs.map((doc) => {
    // doc.data() is never undefined for query doc snapshots
    return doc.data() as StoredStock;
  });
};

const sortStocks = (stock1: StoredStock, stock2: StoredStock) => {
  if (stock1.name < stock2.name) {
    return -1;
  }

  if (stock1.name > stock2.name) {
    return 1;
  }

  return 0;
};

const Home: NextPage = () => {
  const { user } = useAuth();
  const [stocks, setStocks] = useState<StoredStock[]>([]);
  const [isLoadingStocks, setIsLoadingStocks] = useState(false);
  const [successfullyLoadedStocks, setSuccessfullyLoadedStocks] = useState(false);

  useEffect(() => {
    if (user?.uid) {
      const getStocks = async () => {
        setIsLoadingStocks(true);

        try {
          const stocksFromFirestore = await getStocksFromFirestore(user?.uid);
          setSuccessfullyLoadedStocks(true);
          setStocks(stocksFromFirestore.sort(sortStocks));
        } catch (e) {
          console.error('error:', e);
        }

        setIsLoadingStocks(false);
      };

      void getStocks();
    }
  }, [user?.uid]);

  const handleAddStock = async (stock: Stock) => {
    setStocks((prevStocks) =>
      [...prevStocks, { name: stock.name, ticker: stock.ticker }].sort(sortStocks)
    );
    await setDoc(doc(database, `users/${user?.uid}/stocks`, stock.ticker), {
      name: stock.name,
      ticker: stock.ticker
    });
  };

  const handleStockDelete = async (ticker: string) => {
    setStocks((prevStocks) => prevStocks.filter((stock) => stock.ticker != ticker));
    await deleteDoc(doc(database, `users/${user?.uid}/stocks`, ticker));
  };

  return (
    <>
      <Head>
        <title>Dip Finder</title>

        <meta name="description" content="Generated by create next app" />
      </Head>
      <>
        <StocksOverview
          isLoading={isLoadingStocks}
          successfullyLoaded={successfullyLoadedStocks}
          stocks={stocks}
          onAddStock={handleAddStock}
          onDelete={handleStockDelete}
        />
        <PerformanceBarChart stocks={[]} />
      </>
    </>
  );
};

export default Home;
